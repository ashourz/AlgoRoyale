import logging
from enum import Enum


class LoggerType(Enum):
    DATABASE = ("DATABASE", logging.ERROR)

    DATA_STREAM_SESSION_DAO = ("DATA_STREAM_SESSION_DAO", logging.ERROR)
    ENRICHED_DATA_DAO = ("ENRICHED_DATA_DAO", logging.ERROR)
    TRADE_DAO = ("TRADE_DAO", logging.ERROR)
    ORDER_DAO = ("ORDER_DAO", logging.ERROR)

    DATA_STREAM_SESSION_REPO = ("DATA_STREAM_SESSION_REPO", logging.ERROR)
    ENRICHED_DATA_REPO = ("ENRICHED_DATA_REPO", logging.ERROR)
    TRADE_REPO = ("TRADE_REPO", logging.ERROR)
    ORDER_REPO = ("ORDER_REPO", logging.ERROR)
    WATCHLIST_REPO = ("WATCHLIST_REPO", logging.ERROR)

    ALPACA_CORPORATE_ACTION_CLIENT = ("ALPACA_CORPORATE_ACTION_CLIENT", logging.ERROR)
    ALPACA_NEWS_CLIENT = ("ALPACA_NEWS_CLIENT", logging.ERROR)
    ALPACA_SCREENER_CLIENT = ("ALPACA_SCREENER_CLIENT", logging.ERROR)
    ALPACA_STOCK_CLIENT = ("ALPACA_STOCK_CLIENT", logging.ERROR)
    ALPACA_STREAM_CLIENT = ("ALPACA_STREAM_CLIENT", logging.ERROR)
    ALPACA_ORDER_STREAM_CLIENT = ("ALPACA_ORDER_STREAM_CLIENT", logging.ERROR)
    ALPACA_ACCOUNT_CLIENT = ("ALPACA_ACCOUNT_CLIENT", logging.ERROR)
    ALPACA_ASSETS_CLIENT = ("ALPACA_ASSETS_CLIENT", logging.ERROR)
    ALPACA_CALENDAR_CLIENT = ("ALPACA_CALENDAR_CLIENT", logging.ERROR)
    ALPACA_CLOCK_CLIENT = ("ALPACA_CLOCK_CLIENT", logging.ERROR)
    ALPACA_ORDERS_CLIENT = ("ALPACA_ORDERS_CLIENT", logging.ERROR)
    ALPACA_PORTFOLIO_CLIENT = ("ALPACA_PORTFOLIO_CLIENT", logging.ERROR)
    ALPACA_POSITIONS_CLIENT = ("ALPACA_POSITIONS_CLIENT", logging.ERROR)
    ALPACA_WATCHLIST_CLIENT = ("ALPACA_WATCHLIST_CLIENT", logging.ERROR)

    CORPORATE_ACTION_ADAPTER = ("CORPORATE_ACTION_ADAPTER", logging.ERROR)
    NEWS_ADAPTER = ("NEWS_ADAPTER", logging.ERROR)
    SCREENER_ADAPTER = ("SCREENER_ADAPTER", logging.ERROR)
    QUOTE_ADAPTER = ("QUOTE_ADAPTER", logging.ERROR)
    STREAM_ADAPTER = ("STREAM_ADAPTER", logging.ERROR)
    ACCOUNT_ADAPTER = ("ACCOUNT_ADAPTER", logging.ERROR)
    ASSETS_ADAPTER = ("ASSETS_ADAPTER", logging.ERROR)
    CALENDAR_ADAPTER = ("CALENDAR_ADAPTER", logging.ERROR)
    CLOCK_ADAPTER = ("CLOCK_ADAPTER", logging.ERROR)
    ORDER_STREAM_ADAPTER = ("ORDER_STREAM_ADAPTER", logging.ERROR)
    ORDERS_ADAPTER = ("ORDERS_ADAPTER", logging.ERROR)
    PORTFOLIO_ADAPTER = ("PORTFOLIO_ADAPTER", logging.ERROR)
    POSITIONS_ADAPTER = ("POSITIONS_ADAPTER", logging.ERROR)
    WATCHLIST_ADAPTER = ("WATCHLIST_ADAPTER", logging.ERROR)

    STAGE_DATA_MANAGER = ("STAGE_DATA_MANAGER", logging.ERROR)
    STAGE_DATA_PREPARER = ("STAGE_DATA_PREPARER", logging.ERROR)
    STAGE_DATA_WRITER = ("STAGE_DATA_WRITER", logging.ERROR)
    STAGE_DATA_LOADER = ("STAGE_DATA_LOADER", logging.ERROR)
    SYMBOL_STRATEGY_DATA_MANAGER = ("SYMBOL_STRATEGY_DATA_MANAGER", logging.ERROR)
    SYMBOL_STRATEGY_DATA_LOADER = ("SYMBOL_STRATEGY_DATA_LOADER", logging.ERROR)
    SYMBOL_STRATEGY_DATA_WRITER = ("SYMBOL_STRATEGY_DATA_WRITER", logging.ERROR)

    FEATURE_ENGINEERING = ("FEATURE_ENGINEERING", logging.ERROR)

    BACKTEST_DATA_INGEST = ("BACKTEST_DATA_INGEST", logging.ERROR)
    BACKTEST_FEATURE_ENGINEERING = ("BACKTEST_FEATURE_ENGINEERING", logging.ERROR)

    #####

    STRATEGY_DATA_LOADER = ("STRATEGY_DATA_LOADER", logging.ERROR)
    STRATEGY_DATA_WRITER = ("STRATEGY_DATA_WRITER", logging.ERROR)

    STRATEGY_EXECUTOR = ("STRATEGY_EXECUTOR", logging.ERROR)
    STRATEGY_EVALUATOR = ("STRATEGY_EVALUATOR", logging.ERROR)
    STRATEGY_FACTORY = ("STRATEGY_FACTORY", logging.ERROR)
    PORTFOLIO_STRATEGY_COMBINATOR_FACTORY = (
        "PORTFOLIO_STRATEGY_COMBINATOR_FACTORY",
        logging.ERROR,
    )
    SIGNAL_STRATEGY_COMBINATOR_FACTORY = (
        "SIGNAL_STRATEGY_COMBINATOR_FACTORY",
        logging.ERROR,
    )
    SIGNAL_STRATEGY = ("SIGNAL_STRATEGY", logging.ERROR)
    PORTFOLIO_STRATEGY = ("PORTFOLIO_STRATEGY", logging.ERROR)
    SIGNAL_STRATEGY_OPTIMIZER = ("SIGNAL_STRATEGY_OPTIMIZER", logging.ERROR)

    PORTFOLIO_EXECUTOR = ("PORTFOLIO_EXECUTOR", logging.ERROR)
    PORTFOLIO_EVALUATOR = ("PORTFOLIO_EVALUATOR", logging.ERROR)

    PORTFOLIO_ASSET_MATRIX_PREPARER = ("PORTFOLIO_ASSET_MATRIX_PREPARER", logging.ERROR)
    PORTFOLIO_MATRIX_LOADER = ("PORTFOLIO_MATRIX_LOADER", logging.ERROR)
    PORTFOLIO_STRATEGY_OPTIMIZER = ("PORTFOLIO_STRATEGY_OPTIMIZER", logging.ERROR)

    STRATEGY_EVALUATION = ("STRATEGY_EVALUATION", logging.ERROR)
    SYMBOL_EVALUATION = ("SYMBOL_EVALUATION", logging.ERROR)
    PORTFOLIO_EVALUATION = ("PORTFOLIO_EVALUATION", logging.ERROR)

    BACKTEST_SIGNAL_OPTIMIZATION = ("BACKTEST_SIGNAL_OPTIMIZATION", logging.ERROR)
    BACKTEST_SIGNAL_TESTING = ("BACKTEST_SIGNAL_TESTING", logging.ERROR)
    BACKTEST_PORTFOLIO_OPTIMIZATION = ("BACKTEST_PORTFOLIO_OPTIMIZATION", logging.ERROR)
    BACKTEST_PORTFOLIO_TESTING = ("BACKTEST_PORTFOLIO_TESTING", logging.ERROR)

    SYMBOL_STRATEGY_MANAGER = ("SYMBOL_STRATEGY_MANAGER", logging.ERROR)

    STRATEGY_WALK_FORWARD = ("STRATEGY_WALK_FORWARD", logging.ERROR)
    PORTFOLIO_WALK_FORWARD = ("PORTFOLIO_WALK_FORWARD", logging.ERROR)

    BACKTEST_PIPELINE = ("BACKTEST_PIPELINE", logging.ERROR)

    WATCHLIST = ("WATCHLIST", logging.ERROR)
    TESTING = ("TESTING", logging.ERROR)

    @property
    def name_str(self):
        return self.value[0]

    @property
    def log_level(self):
        return self.value[1]

    @property
    def print_logs(self):
        return self.value[2] if len(self.value) > 2 else False
