import logging
from enum import Enum


class LoggerType(Enum):
    TRADING = ("TRADING", logging.ERROR)
    STAGE_DATA_MANAGER = ("STAGE_DATA_MANAGER", logging.ERROR)
    STAGE_DATA_PREPARER = ("STAGE_DATA_PREPARER", logging.ERROR)
    STAGE_DATA_WRITER = ("STAGE_DATA_WRITER", logging.ERROR)
    STAGE_DATA_LOADER = ("STAGE_DATA_LOADER", logging.ERROR)

    STRATEGY_DATA_LOADER = ("STRATEGY_DATA_LOADER", logging.ERROR)
    STRATEGY_DATA_WRITER = ("STRATEGY_DATA_WRITER", logging.ERROR)

    STRATEGY_EXECUTOR = ("STRATEGY_EXECUTOR", logging.ERROR)
    STRATEGY_EVALUATOR = ("STRATEGY_EVALUATOR", logging.ERROR)
    STRATEGY_FACTORY = ("STRATEGY_FACTORY", logging.ERROR)
    PORTFOLIO_STRATEGY_COMBINATOR_FACTORY = (
        "PORTFOLIO_STRATEGY_COMBINATOR_FACTORY",
        logging.ERROR,
    )
    SIGNAL_STRATEGY_COMBINATOR_FACTORY = (
        "SIGNAL_STRATEGY_COMBINATOR_FACTORY",
        logging.ERROR,
    )
    SIGNAL_STRATEGY = ("SIGNAL_STRATEGY", logging.ERROR)
    PORTFOLIO_STRATEGY = ("PORTFOLIO_STRATEGY", logging.ERROR)
    SIGNAL_STRATEGY_OPTIMIZER = ("SIGNAL_STRATEGY_OPTIMIZER", logging.ERROR)

    PORTFOLIO_EXECUTOR = ("PORTFOLIO_EXECUTOR", logging.ERROR)
    PORTFOLIO_EVALUATOR = ("PORTFOLIO_EVALUATOR", logging.ERROR)

    PORTFOLIO_ASSET_MATRIX_PREPARER = ("PORTFOLIO_ASSET_MATRIX_PREPARER", logging.ERROR)
    PORTFOLIO_MATRIX_LOADER = ("PORTFOLIO_MATRIX_LOADER", logging.ERROR)
    PORTFOLIO_STRATEGY_OPTIMIZER = ("PORTFOLIO_STRATEGY_OPTIMIZER", logging.ERROR)

    STRATEGY_EVALUATION = ("STRATEGY_EVALUATION", logging.ERROR)
    SYMBOL_EVALUATION = ("SYMBOL_EVALUATION", logging.ERROR)
    PORTFOLIO_EVALUATION = ("PORTFOLIO_EVALUATION", logging.ERROR)

    BACKTEST_DATA_INGEST = ("BACKTEST_DATA_INGEST", logging.ERROR)
    BACKTEST_FEATURE_ENGINEERING = ("BACKTEST_FEATURE_ENGINEERING", logging.ERROR)
    BACKTEST_SIGNAL_OPTIMIZATION = ("BACKTEST_SIGNAL_OPTIMIZATION", logging.ERROR)
    BACKTEST_SIGNAL_TESTING = ("BACKTEST_SIGNAL_TESTING", logging.ERROR)
    BACKTEST_PORTFOLIO_OPTIMIZATION = ("BACKTEST_PORTFOLIO_OPTIMIZATION", logging.ERROR)
    BACKTEST_PORTFOLIO_TESTING = ("BACKTEST_PORTFOLIO_TESTING", logging.ERROR)

    SYMBOL_STRATEGY_MANAGER = ("SYMBOL_STRATEGY_MANAGER", logging.ERROR)

    STRATEGY_WALK_FORWARD = ("STRATEGY_WALK_FORWARD", logging.ERROR)
    PORTFOLIO_WALK_FORWARD = ("PORTFOLIO_WALK_FORWARD", logging.ERROR)

    BACKTEST_PIPELINE = ("BACKTEST_PIPELINE", logging.ERROR)

    WATCHLIST = ("WATCHLIST", logging.ERROR)
    TESTING = ("TESTING", logging.ERROR)

    @property
    def name_str(self):
        return self.value[0]

    @property
    def log_level(self):
        return self.value[1]

    @property
    def print_logs(self):
        return self.value[2] if len(self.value) > 2 else False
